CHANGELOG:

v1.0-1 Minor Bug Fixes, Changes
  Bug Fixes:
    - Various warnings were removed (apparently, these only appeared in 
      R<2.1) [CTB]
    - plot.network was failing on networks where is.bipartite==TRUE [CTB]
  Changes:
    - The generic form of %c% was temporarily removed, to avoid namespace
      issues with sna.  (This will be rectified in future releases.) [CTB]
v1.0 New Functions, New Features, Changes, and Bug Fixes
  New Functions:
    - Operator overloading for +, -, *, |, &, and ! have been added, as has the
      composition operator, %c% [CTB]
    - Operator overloading is now supported for "[" and "[<-"; this allows
      network objects to be treated transparently as if they were adjacency
      matrices (in some cases, at least).  New extraction/replacement operators
      %n%, %n%<-, %v%, %v%<- have been added for extracting/assigning values to
      network and vertex attributes (respectively) [CTB]
    - network.copy: returns a copy of the input network [CTB]
    - network.dyadcount: return the number of dyads in a network (optionally
      adjusting for the missing dyads) [MSH]
  New Features:
    - add.edges now checks for illegal loop-like edges when edge.check==TRUE
      [CTB]
    - get.neighborhood now allows users to specify whether missing edges should
      be ignored [CTB]
    - set.edge.value now accepts edge values in vector format [CTB]
  Changes:
    - All access access functions now modify their arguments in place; this
      greatly improves performance, but may produce unexpected behavior.
      If users wish to generate a modified copy of a network, they must
      first generate the copy and then modify it.  Otherwise, the old
      object will be modified as well. In accordance with this, modification
      methods now return their (modified) arguments invisibly.  [CTB]
    - Most access functions have now been backended; this has improved the
      performance of many operations by as much as two orders of magnitude [CTB]
    - get.edges and get.edgeIDs now treat all undirected networks as if
      called with neighborhood=="combined" [CTB]
    - as.matrix.network.incidence now handles undirected edges in a more
      conventional way [CTB]
    - network.adjacency will now ignore diagonal entries if has.loops=FALSE 
      [CTB]
  Bug Fixes:
    - as.network.edgelist and as.network.incidence were producing spurious edge
      attributes [CTB]
    - list.edge.attributes generated failed under certain conditions (submitted
      by Matthew Wiener) [CTB]
    - set.edge.attribute was able to write attributes into non-existent (NULL)
      edges [CTB]
    - set.edge.value could exhibit strange behavior when carelessly chosen
      edge subsets were selected [CTB]
    
v0.5-4 New Facilities for Bipartite, New Features, Changes, and Bug Fixes
  New Functions:
    - network.bipartite to store an explicit bipartite network.
      Modified network.initialize, etc, to accept "bipartite" argument. [MSH]
    - is.bipartite: logical test for a bipartite network [MSH]
    - read.paj: read one or more network objects from a Pajek file [MSH, DS]
  New Features:
    - summary.network now reports on edge attributes [MSH]
  Changes:
    - The composition operator (%c%) has been removed due to a name conflict
      with the sna package; since sna now supports network objects, its
      version can be used instead. [CTB]
    - as.sociomatrix is now properly configured to work in tandem with 
      as.sociomatrix.sna (in the sna package).  The functionality of the 
      routine has also been extended slightly.  [CTB]
  Bug Fixes:
    - .First.lib: Print out correct welcome banner for package [MSH]
    - Fix displayisolates determination in plot.network.default [MSH]

v0.5-3 New Functions, New Data Set, and Changes
  New Functions:
    - permute.vertexIDs: Permute vertices in their internal representation [CTB]
  New Data:
    - emon: Drabek et al.'s Emergent Multi-organizational Networks [CTB]
  Changes:
    - The obsolete examples directory has been removed. [CTB]

v0.5-2 New Features, New Functions and Bug Fixes
  New Functions:
    - delete.vertices: Remove one or more vertices (and associated edges)
      from a network object.
    - delete.edge.attribute, delete.network.attribute, delete.vertex attribute:
      Remove an edge/network/vertex attribute.
    - list.edge.attributes, list.network.attributes, list.vertex attributes:
      List all edge/network/vertex attribute names.
  New Features:
    - plot.graph.default now accepts vertex/edge attribute names for most
      vertex/edge display properties.
  Bug Fixes:
    - Edge deletion produced exciting and unexpected behavior in some cases.
    - network.initialize set vertex na attributes to TRUE by default.
